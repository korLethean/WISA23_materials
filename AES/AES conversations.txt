AES Algorithm Implementation

user
This is test message. If you get this message, please answer 'Confirmed'.

ChatGPT
Confirmed.

user
I want implement AES algorithm written in C language. Before start this one, do you know about structures of AES algorithm?

ChatGPT
Yes, I'm familiar with the Advanced Encryption Standard (AES) algorithm. AES is a symmetric key encryption algorithm, which means it uses the same key for both encryption and decryption. It operates on fixed block sizes of 128 bits and supports key sizes of 128, 192, or 256 bits. The algorithm consists of several stages, including key expansion, initial round, main rounds, and a final round.

Here's a high-level overview of the main stages in AES encryption:

1. Key expansion: The original key is expanded into an array of key schedule words, which will be used in subsequent rounds of the algorithm.

2. Initial round:
   - AddRoundKey: The input block (plaintext) is XORed with the initial round key derived from the key schedule.

3. Main rounds (9, 11, or 13 rounds, depending on the key size):
   - SubBytes: A non-linear substitution step where each byte of the block is replaced with a corresponding byte from a pre-determined substitution table (S-box).
   - ShiftRows: A transposition step where the last three rows of the state are shifted cyclically a certain number of steps.
   - MixColumns: A linear mixing operation that operates on the columns of the state, combining the four bytes in each column using a pre-determined matrix.
   - AddRoundKey: The result of the previous three steps is XORed with a round key derived from the key schedule.

4. Final round (no MixColumns):
   - SubBytes
   - ShiftRows
   - AddRoundKey

The decryption process follows a similar structure but in reverse order, using inverse operations for SubBytes, ShiftRows, and MixColumns.

Now that you have an overview of the AES algorithm, you can start implementing it in C. There are many open-source libraries available that you can use as a reference or starting point. Keep in mind that implementing cryptographic algorithms from scratch can be challenging and prone to errors. It's often recommended to use well-established libraries, such as OpenSSL or mbedtls, for production use cases.

user
No. I don't want to use open-source libraries. 

ChatGPT
I understand that you want to implement AES from scratch in C. Here's a basic outline to help you get started:

1. Define constants and lookup tables:
   - Define the key size (128, 192, or 256 bits).
   - Define the block size (128 bits).
   - Define the number of rounds (10, 12, or 14, depending on the key size).
   - Create the S-box and inverse S-box tables for the SubBytes and InvSubBytes steps.
   - Create the Rcon table for the key expansion.

2. Implement helper functions:
   - SubBytes() and InvSubBytes(): Apply the S-box or inverse S-box to each byte in the state.
   - ShiftRows() and InvShiftRows(): Perform row-wise cyclic shifts on the state.
   - MixColumns() and InvMixColumns(): Apply the MixColumns and inverse MixColumns transformations to the state.
   - AddRoundKey(): XOR the state with the round key.

3. Implement key expansion:
   - Write a function to expand the input key into an array of round keys.
   - Use the Rcon table and the SubBytes step in the key expansion.

4. Implement the main AES functions:
   - AES_Encrypt(): Implement the encryption process by applying the initial round, main rounds, and final round in the correct order.
   - AES_Decrypt(): Implement the decryption process by applying the inverse steps in the correct order.

5. Implement a test program to verify your implementation:
   - Use test vectors from the AES specification (FIPS 197) or other sources to validate your implementation.

Here's a rough skeleton for the AES implementation in C:

```c
#include <stdio.h>
#include <stdint.h>

// Constants and lookup tables...

// Helper functions...

// Key expansion...

void AES_Encrypt(uint8_t *input, uint8_t *output, uint8_t *key) {
    // Implement encryption...
}

void AES_Decrypt(uint8_t *input, uint8_t *output, uint8_t *key) {
    // Implement decryption...
}

int main() {
    // Test your implementation...
    return 0;
}
```

Remember to handle security aspects, such as clearing sensitive data from memory when it's no longer needed. Additionally, be mindful of potential side-channel attacks and other vulnerabilities when writing cryptographic code.

user
Now that we have a rough, let's implement AES in C language. First, create a look-up table.

ChatGPT
To implement AES in C, you'll need to create a lookup table for the SubBytes step, which is also known as the S-box, and its inverse, the inverse S-box. These tables are pre-computed and consist of 256 bytes each.

Here's the S-box and inverse S-box lookup tables:

```c
#include <stdint.h>

// S-box (SubBytes)
static const uint8_t s_box[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0

user
Okay. I think you can't complete the S-box. Instead, just declare a look-up table array, I'll fill in the LUT values.

ChatGPT
Certainly! Here's the declaration of the S-box and inverse S-box lookup tables as uninitialized arrays:

```c
#include <stdint.h>

// S-box (SubBytes)
static const uint8_t s_box[256];

// Inverse S-box (InvSubBytes)
static const uint8_t inv_s_box[256];
```

You can then fill in the LUT values for both arrays. Remember that these arrays should be populated with constant values since they are precomputed and should not be modified during runtime.

user
Now we will implement AES key expansion. Do you know the principle behind that algorithm? Please explain.

ChatGPT
Yes, I can explain the key expansion algorithm used in AES. The key expansion algorithm generates an extended key schedule from the initial cipher key. The key schedule is an array of words (4-byte values) that are used as round keys in each round of the AES algorithm. The number of words in the key schedule depends on the key size and the number of rounds.

The key expansion is based on the following principles:

1. Word-wise operations: The algorithm operates on words (4-byte values) rather than individual bytes.

2. Key schedule size: The key schedule size depends on the number of rounds and the key size. For a 128-bit key, there are 44 words in the key schedule (11 rounds * 4 words per round); for a 192-bit key, there are 52 words (13 rounds * 4 words); and for a 256-bit key, there are 60 words (15 rounds * 4 words).

3. Copying the initial key: The first N words of the key schedule (where N is the size of the initial key in words: 4 for a 128-bit key, 6 for a 192-bit key, and 8 for a 256-bit key) are directly copied from the initial key.

4. Key schedule core: The remaining words in the key schedule are generated iteratively using the previous words. The algorithm uses a core function that operates on a single word and consists of the following steps:
   - RotWord: Rotate the word one byte to the left (circular shift).
   - SubWord: Apply the S-box substitution to each byte in the word.
   - Rcon: XOR the first byte of the word with a round constant. The round constants are precomputed and stored in a lookup table called the Rcon table.

5. Combining words: The core function is applied to every (Nth) word in the key schedule (where N is the size of the initial key in words). The output of the core function is XORed with the word N positions earlier in the key schedule. The result of this XOR operation is then XORed with the word immediately preceding it to generate the next word in the key schedule. This process is repeated until the entire key schedule is filled.

Here's a high-level pseudocode description of the key expansion algorithm:

```
1. Copy the initial key to the beginning of the key schedule.
2. For each remaining word in the key schedule:
   a. If the word index is a multiple of N, apply the core function and XOR the result with the word N positions earlier.
   b. XOR the result with the word immediately preceding it.
```

Now that you understand the principle behind the key expansion algorithm, you can proceed with implementing it in C.

user
Then implement AES key expansion in C language. If you are going to use the Rcon table as well, define this as a global variable.

ChatGPT
Here's an implementation of the AES key expansion in C, along with the Rcon table as a global variable:

```c
#include <stdint.h>

// Rcon table for key expansion
static const uint8_t rcon[11] = {
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// S-box (SubBytes) - Please fill in the values
static const uint8_t s_box[256];

// Helper functions
static uint32_t RotWord(uint32_t word) {
    return (word << 8) | (word >> 24);
}

static uint32_t SubWord(uint32_t word) {
    uint32_t result = 0;
    result |= s_box[(word >> 24) & 0xFF] << 24;
    result |= s_box[(word >> 16) & 0xFF] << 16;
    result |= s_box[(word >> 8) & 0xFF] << 8;
    result |= s_box[word & 0xFF];
    return result;
}

// Key expansion
void AES_KeyExpansion(const uint8_t *key, uint32_t *key_schedule, int key_size) {
    int num_words = key_size / 32;  // Number of words in the initial key
    int key_schedule_size = (key_size == 128) ? 44 : (key_size == 192) ? 52 : 60;

    // Copy the initial key to the key schedule
    for (int i = 0; i < num_words; i++) {
        key_schedule[i] = (key[4 * i] << 24) | (key[4 * i + 1] << 16) | (key[4 * i + 2] << 8) | key[4 * i + 3];
    }

    // Generate the remaining words in the key schedule
    for (int i = num_words; i < key_schedule_size; i++) {
        uint32_t temp = key_schedule[i - 1];

        if (i % num_words == 0) {
            temp = SubWord(RotWord(temp)) ^ (rcon[i / num_words] << 24);
        } else if (key_size == 256 && i % num_words == 4) {
            temp = SubWord(temp);
        }

        key_schedule[i] = key_schedule[i - num_words] ^ temp;
    }
}
```

Please make sure to fill in the S-box values in the `s_box` array before using this code.

This implementation assumes that the key size is given in bits (128, 192, or 256) and that the `key` array contains the appropriate number of bytes for the specified key size. The `key_schedule` array should be allocated with enough space to hold the full key schedule (44, 52, or 60 words, depending on the key size).

user
Now we need Subbyte and its inversed version. Please implement the process in C language. As for the S-box table, you can use a table that has been previously declared. I'll fill the table.

ChatGPT
Sure! Here's an implementation of the SubBytes and InvSubBytes functions in C, using the previously declared S-box (`s_box`) and inverse S-box (`inv_s_box`) tables:

```c
#include <stdint.h>

// S-box (SubBytes) - Please fill in the values
static const uint8_t s_box[256];

// Inverse S-box (InvSubBytes) - Please fill in the values
static const uint8_t inv_s_box[256];

// Helper functions
void SubBytes(uint8_t state[4][4]) {
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            state[row][col] = s_box[state[row][col]];
        }
    }
}

void InvSubBytes(uint8_t state[4][4]) {
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            state[row][col] = inv_s_box[state[row][col]];
        }
    }
}
```

These functions perform the SubBytes and InvSubBytes transformations on the input `state` array, which is a 4x4 array of bytes representing the AES state. The input state is modified in-place, so no separate output array is required.

Please make sure to fill in the values for both the `s_box` and `inv_s_box` arrays before using these functions.

user
good. Now write Shiftrow and its inverse version in C language.

ChatGPT
Here's an implementation of the ShiftRows and InvShiftRows functions in C:

```c
#include <stdint.h>

// Helper functions
void ShiftRows(uint8_t state[4][4]) {
    uint8_t temp;

    // Row 1 - Shift left by 1
    temp = state[1][0];
    state[1][0] = state[1][1];
    state[1][1] = state[1][2];
    state[1][2] = state[1][3];
    state[1][3] = temp;

    // Row 2 - Shift left by 2
    temp = state[2][0];
    state[2][0] = state[2][2];
    state[2][2] = temp;
    temp = state[2][1];
    state[2][1] = state[2][3];
    state[2][3] = temp;

    // Row 3 - Shift left by 3
    temp = state[3][0];
    state[3][0] = state[3][3];
    state[3][3] = state[3][2];
    state[3][2] = state[3][1];
    state[3][1] = temp;
}

void InvShiftRows(uint8_t state[4][4]) {
    uint8_t temp;

    // Row 1 - Shift right by 1
    temp = state[1][3];
    state[1][3] = state[1][2];
    state[1][2] = state[1][1];
    state[1][1] = state[1][0];
    state[1][0] = temp;

    // Row 2 - Shift right by 2
    temp = state[2][0];
    state[2][0] = state[2][2];
    state[2][2] = temp;
    temp = state[2][1];
    state[2][1] = state[2][3];
    state[2][3] = temp;

    // Row 3 - Shift right by 3
    temp = state[3][0];
    state[3][0] = state[3][1];
    state[3][1] = state[3][2];
    state[3][2] = state[3][3];
    state[3][3] = temp;
}
```

These functions perform the ShiftRows and InvShiftRows transformations on the input `state` array, which is a 4x4 array of bytes representing the AES state. The input state is modified in-place, so no separate output array is required.

user
Here are Mixcolumns and their inverse version. Write it in C language as well.

ChatGPT
Here's an implementation of the MixColumns and InvMixColumns functions in C:

```c
#include <stdint.h>

// Helper function for Galois Field multiplication
uint8_t gmul(uint8_t a, uint8_t b) {
    uint8_t p = 0;
    uint8_t carry;

    for (int i = 0; i < 8; i++) {
        if (b & 1) {
            p ^= a;
        }

        carry = a & 0x80;
        a <<= 1;

        if (carry) {
            a ^= 0x1B; // x^8 + x^4 + x^3 + x + 1
        }

        b >>= 1;
    }

    return p;
}

void MixColumns(uint8_t state[4][4]) {
    uint8_t temp[4];

    for (int col = 0; col < 4; col++) {
        temp[0] = gmul(state[0][col], 0x02) ^ gmul(state[1][col], 0x03) ^ state[2][col] ^ state[3][col];
        temp[1] = state[0][col] ^ gmul(state[1][col], 0x02) ^ gmul(state[2][col], 0x03) ^ state[3][col];
        temp[2] = state[0][col] ^ state[1][col] ^ gmul(state[2][col], 0x02) ^ gmul(state[3][col], 0x03);
        temp[3] = gmul(state[0][col], 0x03) ^ state[1][col] ^ state[2][col] ^ gmul(state[3][col], 0x02);

        for (int row = 0; row < 4; row++) {
            state[row][col] = temp[row];
        }
    }
}

void InvMixColumns(uint8_t state[4][4]) {
    uint8_t temp[4];

    for (int col = 0; col < 4; col++) {
        temp[0] = gmul(state[0][col], 0x0E) ^ gmul(state[1][col], 0x0B) ^ gmul(state[2][col], 0x0D) ^ gmul(state[3][col], 0x09);
        temp[1] = gmul(state[0][col], 0x09) ^ gmul(state[1][col], 0x0E) ^ gmul(state[2][col], 0x0B) ^ gmul(state[3][col], 0x0D);
        temp[2] = gmul(state[0][col], 0x0D) ^ gmul(state[1][col], 0x09) ^ gmul(state[2][col], 0x0E) ^ gmul(state[3][col], 0x0B);
        temp[3] = gmul(state[0][col], 0x0B) ^ gmul(state[1][col], 0x0D) ^ gmul(state[2][col], 0x09) ^ gmul(state[3][col], 0x0E);

        for (int row = 0; row < 4; row++) {
            state[row][col] = temp[row];
        }
    }
}
```

These functions perform the MixColumns and InvMixColumns transformations on the input `state` array,

user
Lastly, write the AddRoundKey function in C language.

ChatGPT
Here's an implementation of the AddRoundKey function in C:

```c
#include <stdint.h>

void AddRoundKey(uint8_t state[4][4], const uint32_t *round_key) {
    for (int col = 0; col < 4; col++) {
        uint32_t key_word = round_key[col];

        for (int row = 0; row < 4; row++) {
            state[row][col] ^= (key_word >> (24 - 8 * row)) & 0xFF;
        }
    }
}
```

This function performs the AddRoundKey transformation on the input `state` array, which is a 4x4 array of bytes representing the AES state. The `round_key` parameter is a pointer to an array of four 32-bit words representing the round key. The input state is modified in-place, so no separate output array is required.

user
Now we implemented Key expansion, SubBytes(InvSubBytes), ShiftRows(InvShiftRows), MixColumns(InvMixColumns), and AddRoundKey in C language. Use these to complete the Encrypt rough you wrote at the beginning.

ChatGPT
Here's the complete AES encryption implementation using the previously defined functions:

```c
#include <stdint.h>

// S-box (SubBytes) - Please fill in the values
static const uint8_t s_box[256];

// Inverse S-box (InvSubBytes) - Please fill in the values
static const uint8_t inv_s_box[256];

// Rcon table for key expansion
static const uint8_t rcon[11] = {
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// Previously defined helper functions and transformations go here

void AES_Encrypt(const uint8_t *plaintext, const uint8_t *key, uint8_t *ciphertext, int key_size) {
    uint8_t state[4][4];
    uint32_t key_schedule[60]; // Maximum size (for 256-bit key)

    // Initialize state array with input plaintext
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            state[row][col] = plaintext[row + 4 * col];
        }
    }

    // Perform key expansion
    AES_KeyExpansion(key, key_schedule, key_size);

    // Initial AddRoundKey
    AddRoundKey(state, key_schedule);

    // Main rounds
    int num_rounds = (key_size == 128) ? 10 : (key_size == 192) ? 12 : 14;
    for (int round = 1; round < num_rounds; round++) {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state, key_schedule + 4 * round);
    }

    // Final round (without MixColumns)
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, key_schedule + 4 * num_rounds);

    // Copy state array to output ciphertext
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            ciphertext[row + 4 * col] = state[row][col];
        }
    }
}
```

This function takes the input `plaintext`, `key`, and `key_size` (in bits: 128, 192, or 256) and produces the encrypted output `ciphertext`. The plaintext and ciphertext are assumed to be 16-byte arrays, while the key size determines the number of bytes in the key array.

Please make sure to fill in the `s_box` and `inv_s_box` arrays before using this code.

user
Complete the Decrypt function in the same way.

ChatGPT
Here's the complete AES decryption implementation using the previously defined functions:

```c
#include <stdint.h>

// S-box (SubBytes) - Please fill in the values
static const uint8_t s_box[256];

// Inverse S-box (InvSubBytes) - Please fill in the values
static const uint8_t inv_s_box[256];

// Rcon table for key expansion
static const uint8_t rcon[11] = {
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// Previously defined helper functions and transformations go here

void AES_Decrypt(const uint8_t *ciphertext, const uint8_t *key, uint8_t *plaintext, int key_size) {
    uint8_t state[4][4];
    uint32_t key_schedule[60]; // Maximum size (for 256-bit key)

    // Initialize state array with input ciphertext
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            state[row][col] = ciphertext[row + 4 * col];
        }
    }

    // Perform key expansion
    AES_KeyExpansion(key, key_schedule, key_size);

    // Initial AddRoundKey
    int num_rounds = (key_size == 128) ? 10 : (key_size == 192) ? 12 : 14;
    AddRoundKey(state, key_schedule + 4 * num_rounds);

    // Main rounds
    for (int round = num_rounds - 1; round > 0; round--) {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(state, key_schedule + 4 * round);
        InvMixColumns(state);
    }

    // Final round (without InvMixColumns)
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state, key_schedule);

    // Copy state array to output plaintext
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            plaintext[row + 4 * col] = state[row][col];
        }
    }
}
```

This function takes the input `ciphertext`, `key`, and `key_size` (in bits: 128, 192, or 256) and produces the decrypted output `plaintext`. The ciphertext and plaintext are assumed to be 16-byte arrays, while the key size determines the number of bytes in the key array.

Please make sure to fill in the `s_box` and `inv_s_box` arrays before using this code.

user
Now create the main function. Write the main function to call the AES-128 Encryption and Decryption functions once. The key value is '000102030405060708090a0b0c0d0e0f' and the plaintext value is '00112233445566778899aabbccddeeff'. Declare the name of the key variable as 'key_128', the name of the plaintext variable as 'plaintext_128', the name of the ciphertext variable as 'ciphertext_128', and the name of the decryption variable as 'decrypted_128'.

ChatGPT
Here's a main function that demonstrates the use of the AES-128 Encryption and Decryption functions with the provided key and plaintext:

```c
#include <stdio.h>
#include <stdint.h>

// S-box (SubBytes), Inverse S-box (InvSubBytes), Rcon table, and previously defined functions go here

int main() {
    uint8_t key_128[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                           0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

    uint8_t plaintext_128[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};

    uint8_t ciphertext_128[16];
    uint8_t decrypted_128[16];

    AES_Encrypt(plaintext_128, key_128, ciphertext_128, 128);
    AES_Decrypt(ciphertext_128, key_128, decrypted_128, 128);

    printf("Plaintext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", plaintext_128[i]);
    }
    printf("\n");

    printf("Ciphertext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", ciphertext_128[i]);
    }
    printf("\n");

    printf("Decrypted:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", decrypted_128[i]);
    }
    printf("\n");

    return 0;
}
```

This `main` function demonstrates the encryption and decryption process using the provided `key_128` and `plaintext_128`. The encrypted result is stored in `ciphertext_128`, and the decrypted result is stored in `decrypted_128`. The program prints the plaintext, ciphertext, and decrypted values in hexadecimal format. Please ensure that you fill in the `s_box` and `inv_s_box` arrays and include the previously defined functions before running this code.

user
Modify the body of the main function to call AES-192 encryption and decryption. Use '000102030405060708090a0b0c0d0e0f1011121314151617' for the key value and '00112233445566778899aabbccddeeff' for the plaintext value. Declare the name of the key variable as 'key_192', the name of the plaintext variable as 'plaintext_192', the name of the ciphertext variable as 'ciphertext_192', and the name of the decryption variable as 'decrypted_192'.

ChatGPT
Here's the modified main function that demonstrates the use of the AES-192 Encryption and Decryption functions with the provided key and plaintext:

```c
#include <stdio.h>
#include <stdint.h>

// S-box (SubBytes), Inverse S-box (InvSubBytes), Rcon table, and previously defined functions go here

int main() {
    uint8_t key_192[24] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                           0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                           0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};

    uint8_t plaintext_192[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};

    uint8_t ciphertext_192[16];
    uint8_t decrypted_192[16];

    AES_Encrypt(plaintext_192, key_192, ciphertext_192, 192);
    AES_Decrypt(ciphertext_192, key_192, decrypted_192, 192);

    printf("Plaintext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", plaintext_192[i]);
    }
    printf("\n");

    printf("Ciphertext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", ciphertext_192[i]);
    }
    printf("\n");

    printf("Decrypted:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", decrypted_192[i]);
    }
    printf("\n");

    return 0;
}
```

This `main` function demonstrates the encryption and decryption process using the provided `key_192` and `plaintext_192`. The encrypted result is stored in `ciphertext_192`, and the decrypted result is stored in `decrypted_192`. The program prints the plaintext, ciphertext, and decrypted values in hexadecimal format. Please ensure that you fill in the `s_box` and `inv_s_box` arrays and include the previously defined functions before running this code.

user
Modify the body of the main function to call AES-256 encryption and decryption. Use '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f' for the key value, and use the plain text value used in AES-192 for the plaintext value. Declare the name of the key variable as 'key_256', the name of the plaintext variable as 'plaintext_256', the name of the ciphertext variable as 'ciphertext_256', and the name of the decryption variable as 'decrypted_256'.

ChatGPT
Here's the modified main function that demonstrates the use of the AES-256 Encryption and Decryption functions with the provided key and plaintext:

```c
#include <stdio.h>
#include <stdint.h>

// S-box (SubBytes), Inverse S-box (InvSubBytes), Rcon table, and previously defined functions go here

int main() {
    uint8_t key_256[32] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                           0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                           0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                           0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};

    uint8_t plaintext_256[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};

    uint8_t ciphertext_256[16];
    uint8_t decrypted_256[16];

    AES_Encrypt(plaintext_256, key_256, ciphertext_256, 256);
    AES_Decrypt(ciphertext_256, key_256, decrypted_256, 256);

    printf("Plaintext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", plaintext_256[i]);
    }
    printf("\n");

    printf("Ciphertext:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", ciphertext_256[i]);
    }
    printf("\n");

    printf("Decrypted:\n");
    for (int i = 0; i < 16; i++) {
        printf("%02x ", decrypted_256[i]);
    }
    printf("\n");

    return 0;
}
```

This `main` function demonstrates the encryption and decryption process using the provided `key_256` and `plaintext_256`. The encrypted result is stored in `ciphertext_256`, and the decrypted result is stored in `decrypted_256`. The program prints the plaintext, ciphertext, and decrypted values in hexadecimal format. Please ensure that you fill in the `s_box` and `inv_s_box` arrays and include the previously defined functions before running this code.